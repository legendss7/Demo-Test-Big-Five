import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import streamlit.components.v1 as components
import random
components.html('<div id="top-anchor"></div>', height=0)


from datetime import datetime
if "scroll_key" not in st.session_state:
    st.session_state.scroll_key = 0


# --- 1. CONFIGURACI√ìN E INICIALIZACI√ìN ---
st.set_page_config(
    layout="wide", 
    page_title="Test Big Five (OCEAN) | Evaluaci√≥n Profesional",
    page_icon="üß†"
)

# Ancla para scroll
components.html('<a id="top-anchor"></a>', height=0)


# Definici√≥n de las dimensiones del Big Five
DIMENSIONES = {
    "Apertura a la Experiencia": {
        "code": "O", 
        "color": "#0077b6", 
        "icon": "üí°", 
        "desc": "Imaginaci√≥n, curiosidad intelectual, creatividad y aprecio por el arte y las nuevas experiencias.",
        "caracteristicas_altas": "Creativo, curioso, aventurero, con mente abierta",
        "caracteristicas_bajas": "Pr√°ctico, convencional, prefiere lo familiar"
    },
    "Responsabilidad": {
        "code": "C", 
        "color": "#00b4d8", 
        "icon": "üéØ", 
        "desc": "Autodisciplina, organizaci√≥n, cumplimiento de objetivos y sentido del deber.",
        "caracteristicas_altas": "Organizado, confiable, disciplinado, planificado",
        "caracteristicas_bajas": "Flexible, espont√°neo, despreocupado"
    },
    "Extraversi√≥n": {
        "code": "E", 
        "color": "#48cae4", 
        "icon": "üó£Ô∏è", 
        "desc": "Sociabilidad, asertividad, energ√≠a y b√∫squeda de estimulaci√≥n en compa√±√≠a de otros.",
        "caracteristicas_altas": "Sociable, hablador, asertivo, en√©rgico",
        "caracteristicas_bajas": "Reservado, tranquilo, independiente, reflexivo"
    },
    "Amabilidad": {
        "code": "A", 
        "color": "#90e0ef", 
        "icon": "ü§ù", 
        "desc": "Cooperaci√≥n, empat√≠a, compasi√≥n, confianza y respeto por los dem√°s.",
        "caracteristicas_altas": "Compasivo, cooperativo, confiado, altruista",
        "caracteristicas_bajas": "Competitivo, esc√©ptico, directo, objetivo"
    },
    "Estabilidad Emocional": {
        "code": "N", 
        "color": "#0096c7", 
        "icon": "üßò", 
        "desc": "Capacidad para mantener la calma y gestionar el estr√©s. (Opuesto a Neuroticismo)",
        "caracteristicas_altas": "Estable, calmado, resiliente, seguro",
        "caracteristicas_bajas": "Sensible, ansioso, reactivo emocionalmente"
    },
}
DIMENSIONES_LIST = list(DIMENSIONES.keys())

# Escala Likert
ESCALA_LIKERT = {
    1: "Totalmente en desacuerdo",
    2: "En desacuerdo",
    3: "Neutral",
    4: "De acuerdo",
    5: "Totalmente de acuerdo",
}
LIKERT_OPTIONS = list(ESCALA_LIKERT.keys())

def reverse_score(score):
    """Invierte el puntaje para preguntas inversas."""
    return 6 - score

# 50 Preguntas del Big Five (10 por dimensi√≥n, 5 directas y 5 inversas)
PREGUNTAS = [
    # Apertura a la Experiencia (O)
    {"text": "Tengo una imaginaci√≥n muy activa", "dim": "Apertura a la Experiencia", "key": "O1", "reverse": False},
    {"text": "Me gustan los retos intelectuales complejos", "dim": "Apertura a la Experiencia", "key": "O2", "reverse": False},
    {"text": "Disfruto visitando museos y galer√≠as de arte", "dim": "Apertura a la Experiencia", "key": "O3", "reverse": False},
    {"text": "Me gusta experimentar con nuevas ideas", "dim": "Apertura a la Experiencia", "key": "O4", "reverse": False},
    {"text": "Valoro la creatividad y la originalidad", "dim": "Apertura a la Experiencia", "key": "O5", "reverse": False},
    {"text": "Prefiero la rutina a probar cosas nuevas", "dim": "Apertura a la Experiencia", "key": "O6", "reverse": True},
    {"text": "No me interesan las discusiones filos√≥ficas", "dim": "Apertura a la Experiencia", "key": "O7", "reverse": True},
    {"text": "Rara vez reflexiono sobre temas abstractos", "dim": "Apertura a la Experiencia", "key": "O8", "reverse": True},
    {"text": "Prefiero lo convencional a lo original", "dim": "Apertura a la Experiencia", "key": "O9", "reverse": True},
    {"text": "No me gusta cambiar mis h√°bitos establecidos", "dim": "Apertura a la Experiencia", "key": "O10", "reverse": True},
    
    # Responsabilidad (C)
    {"text": "Siempre estoy bien preparado", "dim": "Responsabilidad", "key": "C1", "reverse": False},
    {"text": "Presto atenci√≥n a los detalles", "dim": "Responsabilidad", "key": "C2", "reverse": False},
    {"text": "Cumplo con mis compromisos y plazos", "dim": "Responsabilidad", "key": "C3", "reverse": False},
    {"text": "Sigo un horario y una planificaci√≥n", "dim": "Responsabilidad", "key": "C4", "reverse": False},
    {"text": "Me esfuerzo por la excelencia en mi trabajo", "dim": "Responsabilidad", "key": "C5", "reverse": False},
    {"text": "Dejo las cosas desordenadas", "dim": "Responsabilidad", "key": "C6", "reverse": True},
    {"text": "Evito mis responsabilidades", "dim": "Responsabilidad", "key": "C7", "reverse": True},
    {"text": "Me distraigo f√°cilmente", "dim": "Responsabilidad", "key": "C8", "reverse": True},
    {"text": "A menudo olvido poner las cosas en su lugar", "dim": "Responsabilidad", "key": "C9", "reverse": True},
    {"text": "Tiendo a procrastinar tareas importantes", "dim": "Responsabilidad", "key": "C10", "reverse": True},
    
    # Extraversi√≥n (E)
    {"text": "Soy el alma de la fiesta", "dim": "Extraversi√≥n", "key": "E1", "reverse": False},
    {"text": "Me siento c√≥modo con desconocidos", "dim": "Extraversi√≥n", "key": "E2", "reverse": False},
    {"text": "Busco activamente la compa√±√≠a de otros", "dim": "Extraversi√≥n", "key": "E3", "reverse": False},
    {"text": "Hablo mucho en reuniones sociales", "dim": "Extraversi√≥n", "key": "E4", "reverse": False},
    {"text": "Me gusta llamar la atenci√≥n", "dim": "Extraversi√≥n", "key": "E5", "reverse": False},
    {"text": "Prefiero estar solo que rodeado de gente", "dim": "Extraversi√≥n", "key": "E6", "reverse": True},
    {"text": "Soy una persona reservada y callada", "dim": "Extraversi√≥n", "key": "E7", "reverse": True},
    {"text": "Me cuesta expresarme en grupos grandes", "dim": "Extraversi√≥n", "key": "E8", "reverse": True},
    {"text": "Prefiero trabajar en segundo plano", "dim": "Extraversi√≥n", "key": "E9", "reverse": True},
    {"text": "Me agotan las interacciones sociales prolongadas", "dim": "Extraversi√≥n", "key": "E10", "reverse": True},
    
    # Amabilidad (A)
    {"text": "Simpatizo f√°cilmente con otros", "dim": "Amabilidad", "key": "A1", "reverse": False},
    {"text": "Me preocupo por el bienestar de los dem√°s", "dim": "Amabilidad", "key": "A2", "reverse": False},
    {"text": "Trato a todos con respeto", "dim": "Amabilidad", "key": "A3", "reverse": False},
    {"text": "Ayudo a otros sin esperar nada a cambio", "dim": "Amabilidad", "key": "A4", "reverse": False},
    {"text": "Conf√≠o en las buenas intenciones de la gente", "dim": "Amabilidad", "key": "A5", "reverse": False},
    {"text": "No me interesa realmente la gente", "dim": "Amabilidad", "key": "A6", "reverse": True},
    {"text": "Soy c√≠nico sobre las intenciones ajenas", "dim": "Amabilidad", "key": "A7", "reverse": True},
    {"text": "Puedo ser bastante insensible", "dim": "Amabilidad", "key": "A8", "reverse": True},
    {"text": "Pienso primero en m√≠ mismo", "dim": "Amabilidad", "key": "A9", "reverse": True},
    {"text": "No me conmueven los problemas de otros", "dim": "Amabilidad", "key": "A10", "reverse": True},
    
    # Estabilidad Emocional (N invertido)
    {"text": "Mantengo la calma bajo presi√≥n", "dim": "Estabilidad Emocional", "key": "N1", "reverse": False},
    {"text": "Rara vez me siento ansioso o estresado", "dim": "Estabilidad Emocional", "key": "N2", "reverse": False},
    {"text": "Soy emocionalmente estable", "dim": "Estabilidad Emocional", "key": "N3", "reverse": False},
    {"text": "Me recupero r√°pidamente de contratiempos", "dim": "Estabilidad Emocional", "key": "N4", "reverse": False},
    {"text": "Me siento seguro de m√≠ mismo", "dim": "Estabilidad Emocional", "key": "N5", "reverse": False},
    {"text": "Me preocupo mucho por las cosas", "dim": "Estabilidad Emocional", "key": "N6", "reverse": True},
    {"text": "Me irrito f√°cilmente", "dim": "Estabilidad Emocional", "key": "N7", "reverse": True},
    {"text": "A menudo me siento triste o deprimido", "dim": "Estabilidad Emocional", "key": "N8", "reverse": True},
    {"text": "Tengo cambios de humor frecuentes", "dim": "Estabilidad Emocional", "key": "N9", "reverse": True},
    {"text": "Me siento abrumado por el estr√©s", "dim": "Estabilidad Emocional", "key": "N10", "reverse": True},
]

# Inicializaci√≥n de Session State
if 'stage' not in st.session_state:
    st.session_state.stage = 'inicio'
if 'respuestas' not in st.session_state:
    st.session_state.respuestas = {p['key']: None for p in PREGUNTAS}
if 'resultados' not in st.session_state:
    st.session_state.resultados = None
if 'current_dimension_index' not in st.session_state:
    st.session_state.current_dimension_index = 0
if 'scroll_key' not in st.session_state:
    st.session_state.scroll_key = 0
if 'fecha_evaluacion' not in st.session_state:
    st.session_state.fecha_evaluacion = None

# --- 2. FUNCIONES DE SCROLL ---
def forzar_scroll_al_top():
    """Fuerza el scroll al inicio de la vista de forma segura (compatible con Streamlit Cloud)."""
    # Crear o actualizar la variable de control
    st.session_state.scroll_key = st.session_state.get("scroll_key", 0) + 1

    # Contenedor seguro para HTML (impide errores en Streamlit Cloud)
    placeholder = st.empty()

    js_code = """
        <script>
            window.addEventListener('load', function() {
                setTimeout(function() {
                    try {
                        const doc = window.parent?.document || document;
                        const anchor = doc.querySelector('#top-anchor');
                        if (anchor) {
                            anchor.scrollIntoView({ behavior: 'auto', block: 'start' });
                        } else {
                            const container = doc.querySelector('[data-testid="stAppViewContainer"]');
                            if (container) {
                                container.scrollTo({ top: 0, behavior: 'auto' });
                            } else {
                                window.scrollTo({ top: 0, behavior: 'auto' });
                            }
                        }
                    } catch (err) {
                        console.error('Scroll error:', err);
                    }
                }, 500);
            });
        </script>
    """

    # Renderizamos el script dentro de un contenedor temporal
    placeholder.html(js_code, height=0, key=f"scroll_{st.session_state.scroll_key}")


# --- 3. FUNCIONES DE C√ÅLCULO ---
def calcular_resultados(respuestas):
    """Calcula las puntuaciones de las 5 dimensiones (0-100)."""
    scores = {dim: [] for dim in DIMENSIONES_LIST}
    
    for p in PREGUNTAS:
        respuesta = respuestas.get(p['key'])
        
        if respuesta is None:
            score = 3
        elif p['reverse']:
            score = reverse_score(respuesta)
        else:
            score = respuesta
            
        scores[p['dim']].append(score)
    
    resultados = {}
    for dim, score_list in scores.items():
        avg_score = np.mean(score_list)
        # Convertir de escala 1-5 a 0-100
        percent_score = ((avg_score - 1) / 4) * 100
        resultados[dim] = round(percent_score, 1)
    
    return resultados

def get_nivel_interpretacion(score):
    """Clasifica el puntaje y retorna nivel, color y etiqueta."""
    if score >= 75:
        return "Muy Alto", "#2a9d8f", "Dominante"
    elif score >= 60:
        return "Alto", "#264653", "Marcado"
    elif score >= 40:
        return "Promedio", "#e9c46a", "Moderado"
    elif score >= 25:
        return "Bajo", "#f4a261", "Suave"
    else:
        return "Muy Bajo", "#e76f51", "M√≠nimo"

# --- 4. FUNCIONES DE GR√ÅFICOS ---
def crear_grafico_radar(resultados):
    """Crea gr√°fico de radar del perfil."""
    categories = [DIMENSIONES[dim]['code'] + ' - ' + dim for dim in resultados.keys()]
    values = list(resultados.values())
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name='Tu Perfil',
        line=dict(color='#0077b6', width=3),
        fillcolor='rgba(0, 119, 182, 0.25)',
        marker=dict(size=10, color='#00b4d8')
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100],
                tickvals=[0, 25, 50, 75, 100],
                ticktext=["0", "25", "50", "75", "100"],
                linecolor="#cccccc"
            ),
            angularaxis=dict(
                linecolor="#cccccc"
            ),
        ),
        showlegend=False,
        height=600,
        title=dict(
            text="Perfil de Personalidad Big Five (OCEAN)",
            x=0.5,
            xanchor='center',
            font=dict(size=20, color='#333')
        ),
        template="plotly_white"
    )
    
    return fig

def crear_grafico_barras(resultados):
    """Crea gr√°fico de barras horizontales."""
    df = pd.DataFrame({
        'Dimensi√≥n': list(resultados.keys()),
        'Puntuaci√≥n': list(resultados.values())
    })
    
    df = df.sort_values('Puntuaci√≥n', ascending=True)
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        y=df['Dimensi√≥n'],
        x=df['Puntuaci√≥n'],
        orientation='h',
        marker=dict(
            color=df['Puntuaci√≥n'],
            colorscale='RdYlGn',
            showscale=True,
            colorbar=dict(title="Puntuaci√≥n", x=1.15)
        ),
        text=df['Puntuaci√≥n'].round(1),
        textposition='outside',
        hovertemplate='<b>%{y}</b><br>Puntuaci√≥n: %{x:.1f}<extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(text="Puntuaciones por Dimensi√≥n", x=0.5, xanchor='center', font=dict(size=18)),
        xaxis=dict(title="Puntuaci√≥n (0-100)", range=[0, 110]),
        yaxis=dict(title=""),
        height=500,
        margin=dict(l=200),
        template="plotly_white"
    )
    
    return fig

def crear_grafico_comparativo(resultados):
    """Crea gr√°fico comparativo con la poblaci√≥n promedio."""
    dimensiones = list(resultados.keys())
    tu_perfil = list(resultados.values())
    promedio = [50] * len(dimensiones)  # Poblaci√≥n promedio = 50
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        name='Tu Perfil',
        x=dimensiones,
        y=tu_perfil,
        marker=dict(color='#0077b6'),
        text=[f"{v:.1f}" for v in tu_perfil],
        textposition='outside'
    ))
    
    fig.add_trace(go.Bar(
        name='Promedio Poblacional',
        x=dimensiones,
        y=promedio,
        marker=dict(color='#95a5a6'),
        text=['50.0'] * len(dimensiones),
        textposition='outside'
    ))
    
    fig.update_layout(
        title=dict(text="Tu Perfil vs Promedio Poblacional", x=0.5, xanchor='center', font=dict(size=18)),
        yaxis=dict(title="Puntuaci√≥n (0-100)", range=[0, 110]),
        xaxis=dict(title=""),
        barmode='group',
        height=500,
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        template="plotly_white"
    )
    
    return fig

# --- 5. FUNCIONES DE NAVEGACI√ìN ---
def iniciar_test():
    """Inicia el test."""
    st.session_state.stage = 'test_activo'
    st.session_state.current_dimension_index = 0
    st.session_state.respuestas = {p['key']: None for p in PREGUNTAS}
    st.session_state.resultados = None

def completar_al_azar():
    """Genera respuestas aleatorias."""
    st.session_state.respuestas = {p['key']: random.choice(LIKERT_OPTIONS) for p in PREGUNTAS}
    st.session_state.resultados = calcular_resultados(st.session_state.respuestas)
    st.session_state.fecha_evaluacion = datetime.now().strftime("%d/%m/%Y %H:%M")
    st.session_state.stage = 'resultados'

def reiniciar_test():
    """Reinicia el test."""
    st.session_state.stage = 'inicio'
    st.session_state.current_dimension_index = 0
    st.session_state.respuestas = {p['key']: None for p in PREGUNTAS}
    st.session_state.resultados = None

# --- 6. VISTAS ---
components.html('<a id="top-anchor"></a>', height=0)

def vista_inicio():
    """Vista de inicio."""
    forzar_scroll_al_top()
    
    st.title("üß† Test de Personalidad Big Five (OCEAN)")
    st.markdown("### Evaluaci√≥n Profesional de los Cinco Grandes Factores de Personalidad")
    
    st.info("""
    El modelo Big Five (tambi√©n conocido como OCEAN) es el marco m√°s respaldado cient√≠ficamente para 
    comprender la personalidad humana. Mide cinco dimensiones fundamentales que predicen 
    comportamientos en m√∫ltiples contextos.
    """)
    
    st.markdown("---")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìã Informaci√≥n del Test")
        st.markdown("""
        - **Duraci√≥n:** 10-15 minutos
        - **Preguntas:** 50 √≠tems (10 por dimensi√≥n)
        - **Escala:** Likert de 5 puntos
        - **Dimensiones evaluadas:**
          - üí° **O**penness (Apertura a la Experiencia)
          - üéØ **C**onscientiousness (Responsabilidad)
          - üó£Ô∏è **E**xtraversion (Extraversi√≥n)
          - ü§ù **A**greeableness (Amabilidad)
          - üßò **N**euroticism (Estabilidad Emocional*)
        
        _*En este test medimos Estabilidad Emocional (opuesto a Neuroticismo)_
        """)
    
    with col2:
        st.subheader("üöÄ Comenzar")
        
        if st.button("üìù Iniciar Test", type="primary", use_container_width=True):
            iniciar_test()
            st.rerun()
        
        st.markdown("---")
        
        st.caption("**Modo Demo:**")
        if st.button("üé≤ Completar Aleatoriamente", type="secondary", use_container_width=True):
            completar_al_azar()
            st.rerun()

def vista_test_activo():
    """Vista del test activo."""
    forzar_scroll_al_top()
    
    current_index = st.session_state.current_dimension_index
    current_dim_name = DIMENSIONES_LIST[current_index]
    dim_info = DIMENSIONES[current_dim_name]
    
    st.title(f"{dim_info['icon']} Dimensi√≥n {current_index + 1} de {len(DIMENSIONES_LIST)}: {current_dim_name}")
    st.markdown(f"**{dim_info['desc']}**")
    
    # Progreso general
    total_respondidas = sum(1 for v in st.session_state.respuestas.values() if v is not None)
    total_preguntas = len(PREGUNTAS)
    progreso = total_respondidas / total_preguntas
    
    st.progress(progreso, text=f"Progreso: {total_respondidas}/{total_preguntas} preguntas ({progreso*100:.0f}%)")
    st.markdown("---")
    
    preguntas_dimension = [p for p in PREGUNTAS if p['dim'] == current_dim_name]
    
    with st.form(f"form_dim_{current_index}"):
        st.subheader(f"Responde a las siguientes 10 afirmaciones:")
        
        respuestas_form = {}
        
        for i, p in enumerate(preguntas_dimension, 1):
            with st.container(border=True):
                st.markdown(f"**{i}. {p['text']}**")
                
                initial_value = st.session_state.respuestas.get(p['key'])
                initial_index = LIKERT_OPTIONS.index(initial_value) if initial_value is not None else None
                
                respuestas_form[p['key']] = st.radio(
                    label=f"Selecciona tu respuesta para: {p['text'][:30]}...",
                    options=LIKERT_OPTIONS,
                    format_func=lambda x: ESCALA_LIKERT[x],
                    index=initial_index,
                    key=f"radio_{p['key']}",
                    horizontal=True,
                    label_visibility="collapsed"
                )
        
        st.markdown("---")
        
        if current_index == len(DIMENSIONES_LIST) - 1:
            button_label = "‚úÖ Finalizar y Ver Resultados"
        else:
            next_dim = DIMENSIONES_LIST[current_index + 1]
            button_label = f"‚û°Ô∏è Continuar a: {next_dim}"
        
        submitted = st.form_submit_button(button_label, type="primary", use_container_width=True)
        
        if submitted:
            # Validar que todas est√©n respondidas
            todas_respondidas = all(v is not None for v in respuestas_form.values())
            
            if not todas_respondidas:
                st.error(f"‚ö†Ô∏è Por favor, responde todas las preguntas de esta dimensi√≥n antes de continuar.")
            else:
                # Guardar respuestas
                st.session_state.respuestas.update(respuestas_form)
                
                # Avanzar o finalizar
                if current_index < len(DIMENSIONES_LIST) - 1:
                    st.session_state.current_dimension_index += 1
                    st.rerun()
                else:
                    # Calcular resultados
                    st.session_state.resultados = calcular_resultados(st.session_state.respuestas)
                    st.session_state.fecha_evaluacion = datetime.now().strftime("%d/%m/%Y %H:%M")
                    st.session_state.stage = 'resultados'
                    st.rerun()

def vista_resultados():
    """Vista de resultados profesional."""
    forzar_scroll_al_top()
    
    resultados = st.session_state.resultados
    
    if resultados is None:
        st.warning("No hay resultados disponibles.")
        if st.button("Volver al Inicio"):
            reiniciar_test()
            st.rerun()
        return
    
    st.title("üìä Tu Informe de Personalidad Big Five")
    st.markdown(f"**Fecha de Evaluaci√≥n:** {st.session_state.fecha_evaluacion}")
    st.markdown("---")
    
    # --- 1. RESUMEN EJECUTIVO ---
    st.header("1. üìà Resumen Ejecutivo")
    
    promedio_total = np.mean(list(resultados.values()))
    
    st.markdown(f"""
    <div style="background: linear-gradient(135deg, #0077b6 0%, #00b4d8 100%); 
                padding: 30px; border-radius: 15px; color: white; text-align: center;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2); margin-bottom: 30px;">
        <h2 style="margin: 0; font-size: 2.5em;">Puntuaci√≥n Promedio: {promedio_total:.1f}/100</h2>
        <p style="margin: 15px 0 0 0; font-size: 1.2em; opacity: 0.9;">
            Perfil Equilibrado con Caracter√≠sticas Distintivas
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # --- 2. VISUALIZACIONES ---
    st.header("2. üìä Visualizaci√≥n de tu Perfil")
    
    tab1, tab2, tab3 = st.tabs(["üéØ Radar", "üìä Barras", "‚öñÔ∏è Comparativo"])
    
    with tab1:
        st.plotly_chart(crear_grafico_radar(resultados), use_container_width=True)
        st.caption("Gr√°fico de radar mostrando tu perfil en las 5 dimensiones de personalidad.")
    
    with tab2:
        st.plotly_chart(crear_grafico_barras(resultados), use_container_width=True)
        st.caption("Puntuaciones ordenadas de menor a mayor.")
    
    with tab3:
        st.plotly_chart(crear_grafico_comparativo(resultados), use_container_width=True)
        st.caption("Comparaci√≥n de tu perfil con el promedio poblacional (50 puntos).")
    
    st.markdown("---")
    
    # --- 3. AN√ÅLISIS DETALLADO ---
    st.header("3. üîç An√°lisis Detallado por Dimensi√≥n")
    
    for dim_name in DIMENSIONES_LIST:
        score = resultados[dim_name]
        dim_info = DIMENSIONES[dim_name]
        nivel, color, etiqueta = get_nivel_interpretacion(score)
        
        with st.expander(f"{dim_info['icon']} **{dim_name}**: {score:.1f} puntos ({nivel})", expanded=True):
            col1, col2 = st.columns([1, 2])
            
            with col1:
                # Medidor circular
                fig_gauge = go.Figure(go.Indicator(
                    mode="gauge+number",
                    value=score,
                    domain={'x': [0, 1], 'y': [0, 1]},
                    title={'text': f"{dim_info['code']}", 'font': {'size': 24}},
                    number={'font': {'size': 40}},
                    gauge={
                        'axis': {'range': [None, 100], 'tickwidth': 1},
                        'bar': {'color': dim_info['color']},
                        'steps': [
                            {'range': [0, 25], 'color': '#f8d7da'},
                            {'range': [25, 40], 'color': '#fff3cd'},
                            {'range': [40, 60], 'color': '#d1ecf1'},
                            {'range': [60, 75], 'color': '#d4edda'},
                            {'range': [75, 100], 'color': '#c3e6cb'}
                        ],
                        'threshold': {
                            'line': {'color': "red", 'width': 4},
                            'thickness': 0.75,
                            'value': score
                        }
                    }
                ))
                fig_gauge.update_layout(height=250, margin=dict(l=20, r=20, t=50, b=20))
                st.plotly_chart(fig_gauge, use_container_width=True)
            
            with col2:
                st.markdown(f"**Descripci√≥n:**")
                st.markdown(dim_info['desc'])
                
                st.markdown(f"**Nivel:** <span style='color:{color}; font-weight: bold; font-size: 1.2em;'>{nivel} ({etiqueta})</span>", unsafe_allow_html=True)
                
                if score >= 60:
                    st.success(f"‚úÖ **Puntuaci√≥n Alta**")
                    st.markdown(f"**Caracter√≠sticas destacadas:** {dim_info['caracteristicas_altas']}")
                elif score >= 40:
                    st.info(f"‚ÑπÔ∏è **Puntuaci√≥n Media**")
                    st.markdown("Tu puntuaci√≥n se encuentra en el rango promedio, mostrando un equilibrio en esta dimensi√≥n.")
                else:
                    st.warning(f"‚ö†Ô∏è **Puntuaci√≥n Baja**")
                    st.markdown(f"**Caracter√≠sticas destacadas:** {dim_info['caracteristicas_bajas']}")
            
            st.markdown("---")
            
            # Interpretaci√≥n profesional espec√≠fica
            st.markdown("**üíº Implicaciones Profesionales:**")
            
            if dim_name == "Apertura a la Experiencia":
                if score >= 60:
                    st.markdown("""
                    - ‚úÖ **Id√≥neo para:** Innovaci√≥n, I+D, Dise√±o Creativo, Estrategia, Consultor√≠a
                    - Excelente adaptabilidad a cambios y entornos din√°micos
                    - Alta capacidad para generar ideas originales y soluciones novedosas
                    """)
                elif score <= 40:
                    st.markdown("""
                    - ‚úÖ **Id√≥neo para:** Roles con procedimientos establecidos, Operaciones, Manufactura
                    - Preferencia por entornos estructurados y predecibles
                    - ‚ö†Ô∏è Puede requerir apoyo en contextos de alta incertidumbre
                    """)
                else:
                    st.markdown("""
                    - ‚úÖ **Perfil vers√°til:** Balance entre creatividad y pragmatismo
                    - Apto para roles que combinen innovaci√≥n con procesos estructurados
                    """)
            
            elif dim_name == "Responsabilidad":
                if score >= 60:
                    st.markdown("""
                    - ‚úÖ **Id√≥neo para:** Gesti√≥n de Proyectos, Auditor√≠a, Control de Calidad, Finanzas
                    - Excelente autogesti√≥n y cumplimiento de plazos
                    - Alta confiabilidad y atenci√≥n al detalle
                    """)
                elif score <= 40:
                    st.markdown("""
                    - ‚úÖ **Id√≥neo para:** Roles creativos con flexibilidad, Trabajo por proyectos cortos
                    - Mayor espontaneidad y adaptabilidad
                    - ‚ö†Ô∏è Puede necesitar estructura externa y seguimiento
                    """)
                else:
                    st.markdown("""
                    - ‚úÖ **Perfil equilibrado:** Capaz de ser disciplinado cuando es necesario
                    - Apto para la mayor√≠a de roles con supervisi√≥n moderada
                    """)
            
            elif dim_name == "Extraversi√≥n":
                if score >= 60:
                    st.markdown("""
                    - ‚úÖ **Id√≥neo para:** Ventas, Liderazgo de Equipos, Relaciones P√∫blicas, Networking
                    - Prospera en ambientes sociales y roles de alta interacci√≥n
                    - Excelente para posiciones que requieren influenciar a otros
                    """)
                elif score <= 40:
                    st.markdown("""
                    - ‚úÖ **Id√≥neo para:** An√°lisis, Investigaci√≥n, Programaci√≥n, Roles T√©cnicos
                    - Mayor concentraci√≥n en trabajo individual
                    - Preferencia por comunicaci√≥n escrita sobre oral
                    """)
                else:
                    st.markdown("""
                    - ‚úÖ **Perfil ambivertido:** Adaptable a trabajo en equipo y solitario
                    - Versatilidad en diferentes contextos sociales
                    """)
            
            elif dim_name == "Amabilidad":
                if score >= 60:
                    st.markdown("""
                    - ‚úÖ **Id√≥neo para:** Recursos Humanos, Servicio al Cliente, Mediaci√≥n, Trabajo Social
                    - Excelente para crear ambientes colaborativos
                    - Alta capacidad de empat√≠a y resoluci√≥n de conflictos
                    """)
                elif score <= 40:
                    st.markdown("""
                    - ‚úÖ **Id√≥neo para:** Negociaci√≥n, Roles competitivos, Toma de decisiones dif√≠ciles
                    - Mayor objetividad en situaciones complejas
                    - Capacidad para tomar decisiones impopulares cuando es necesario
                    """)
                else:
                    st.markdown("""
                    - ‚úÖ **Perfil equilibrado:** Balance entre empat√≠a y objetividad
                    - Apto para roles que requieran diplomacia y firmeza
                    """)
            
            elif dim_name == "Estabilidad Emocional":
                if score >= 60:
                    st.markdown("""
                    - ‚úÖ **Id√≥neo para:** Gesti√≥n de Crisis, Operaciones de Alto Estr√©s, Liderazgo Ejecutivo
                    - Excelente resiliencia y manejo del estr√©s
                    - Capacidad para mantener la calma bajo presi√≥n
                    """)
                elif score <= 40:
                    st.markdown("""
                    - ‚úÖ **Id√≥neo para:** Roles con ambiente predecible y bajo estr√©s
                    - Mayor sensibilidad emocional (puede ser ventajoso en roles creativos)
                    - ‚ö†Ô∏è Puede requerir apoyo en situaciones de alta presi√≥n
                    """)
                else:
                    st.markdown("""
                    - ‚úÖ **Perfil normal:** Gesti√≥n emocional adecuada
                    - Apto para la mayor√≠a de contextos laborales
                    """)
    
    st.markdown("---")
    
    # --- 4. FORTALEZAS Y √ÅREAS DE DESARROLLO ---
    st.header("4. üí™ Fortalezas y √Åreas de Desarrollo")
    
    col_fort, col_des = st.columns(2)
    
    # Top 3 fortalezas
    sorted_dims = sorted(resultados.items(), key=lambda x: x[1], reverse=True)
    top_3 = sorted_dims[:3]
    bottom_3 = sorted_dims[-3:]
    
    with col_fort:
        st.subheader("üåü Tus 3 Principales Fortalezas")
        for i, (dim, score) in enumerate(top_3, 1):
            icon = DIMENSIONES[dim]['icon']
            st.markdown(f"""
            **{i}. {icon} {dim}**
            - Puntuaci√≥n: **{score:.1f}**/100
            - {DIMENSIONES[dim]['caracteristicas_altas']}
            """)
            st.progress(score / 100)
            st.markdown("")
    
    with col_des:
        st.subheader("üìà √Åreas de Desarrollo")
        for i, (dim, score) in enumerate(bottom_3, 1):
            icon = DIMENSIONES[dim]['icon']
            nivel, _, _ = get_nivel_interpretacion(score)
            
            if score < 40:
                st.markdown(f"""
                **{i}. {icon} {dim}**
                - Puntuaci√≥n: **{score:.1f}**/100 ({nivel})
                - Considerar desarrollo si es relevante para tus objetivos
                """)
            else:
                st.markdown(f"""
                **{i}. {icon} {dim}**
                - Puntuaci√≥n: **{score:.1f}**/100 ({nivel})
                - Nivel adecuado, sin necesidad cr√≠tica de desarrollo
                """)
            st.progress(score / 100)
            st.markdown("")
    
    st.markdown("---")
    
    # --- 5. TABLA DE RESULTADOS ---
    st.header("5. üìã Tabla Resumen de Resultados")
    
    df_resultados = pd.DataFrame({
        'Dimensi√≥n': [dim for dim in resultados.keys()],
        'C√≥digo': [DIMENSIONES[dim]['code'] for dim in resultados.keys()],
        'Puntuaci√≥n': [f"{score:.1f}" for score in resultados.values()],
        'Nivel': [get_nivel_interpretacion(score)[0] for score in resultados.values()],
        'Etiqueta': [get_nivel_interpretacion(score)[2] for score in resultados.values()]
    })
    
    # Aplicar estilos
    def color_nivel(val):
        try:
            score = float(val)
            if score >= 75:
                return 'background-color: #c3e6cb; color: #155724; font-weight: bold;'
            elif score >= 60:
                return 'background-color: #d4edda; color: #155724;'
            elif score >= 40:
                return 'background-color: #d1ecf1; color: #0c5460;'
            elif score >= 25:
                return 'background-color: #fff3cd; color: #856404;'
            else:
                return 'background-color: #f8d7da; color: #721c24; font-weight: bold;'
        except:
            return ''
    
    styled_df = df_resultados.style.applymap(color_nivel, subset=['Puntuaci√≥n'])
    
    st.dataframe(styled_df, use_container_width=True, hide_index=True)
    
    st.markdown("---")
    
    # --- 6. RECOMENDACIONES PROFESIONALES ---
    st.header("6. üíº Recomendaciones Profesionales")
    
    # An√°lisis de perfil dominante
    perfil_dominante = max(resultados.items(), key=lambda x: x[1])
    dim_dominante, score_dominante = perfil_dominante
    
    st.subheader(f"üéØ Perfil Dominante: {DIMENSIONES[dim_dominante]['icon']} {dim_dominante}")
    
    st.markdown(f"""
    Tu dimensi√≥n m√°s destacada es **{dim_dominante}** con una puntuaci√≥n de **{score_dominante:.1f}/100**.
    Esto sugiere que tu perfil est√° especialmente orientado hacia caracter√≠sticas de {dim_dominante.lower()}.
    """)
    
    # Recomendaciones basadas en el perfil
    st.markdown("### üìå Roles Profesionales Sugeridos:")
    
    roles_recomendados = []
    
    if resultados["Apertura a la Experiencia"] >= 60 and resultados["Responsabilidad"] >= 60:
        roles_recomendados.append("**Consultor Estrat√©gico** - Combina creatividad con disciplina")
    
    if resultados["Extraversi√≥n"] >= 60 and resultados["Amabilidad"] >= 60:
        roles_recomendados.append("**Gerente de Recursos Humanos** - Sociable y emp√°tico")
    
    if resultados["Responsabilidad"] >= 60 and resultados["Estabilidad Emocional"] >= 60:
        roles_recomendados.append("**Director de Proyectos** - Organizado y resiliente")
    
    if resultados["Apertura a la Experiencia"] >= 60 and resultados["Extraversi√≥n"] <= 40:
        roles_recomendados.append("**Investigador/Analista** - Creativo e independiente")
    
    if resultados["Amabilidad"] >= 60 and resultados["Estabilidad Emocional"] >= 60:
        roles_recomendados.append("**Coach o Mentor** - Emp√°tico y estable")
    
    if resultados["Extraversi√≥n"] >= 60 and resultados["Estabilidad Emocional"] >= 60:
        roles_recomendados.append("**Director Comercial** - Sociable y maneja presi√≥n")
    
    if resultados["Responsabilidad"] >= 60 and resultados["Apertura a la Experiencia"] <= 40:
        roles_recomendados.append("**Gerente de Operaciones** - Disciplinado y orientado a procesos")
    
    if not roles_recomendados:
        roles_recomendados.append("**Perfil Vers√°til** - Apto para diversos roles seg√∫n intereses")
    
    for rol in roles_recomendados:
        st.markdown(f"- {rol}")
    
    st.markdown("---")
    
    # --- 7. INTERPRETACI√ìN CIENT√çFICA ---
    with st.expander("üìö **Sobre el Modelo Big Five**", expanded=False):
        st.markdown("""
        ### El Modelo de los Cinco Grandes (Big Five)
        
        El modelo Big Five, tambi√©n conocido como OCEAN, es el marco de personalidad m√°s respaldado 
        por la investigaci√≥n cient√≠fica en psicolog√≠a. Se basa en d√©cadas de estudios emp√≠ricos y 
        ha demostrado ser v√°lido en m√∫ltiples culturas y contextos.
        
        **Las Cinco Dimensiones:**
        
        1. **Apertura a la Experiencia (O)**: Refleja la tendencia a ser imaginativo, curioso y abierto 
           a nuevas experiencias versus pr√°ctico y convencional.
        
        2. **Responsabilidad (C)**: Mide el grado de organizaci√≥n, disciplina y orientaci√≥n a objetivos 
           versus espontaneidad y flexibilidad.
        
        3. **Extraversi√≥n (E)**: Indica la tendencia hacia la sociabilidad, asertividad y b√∫squeda de 
           estimulaci√≥n social versus reserva y preferencia por la soledad.
        
        4. **Amabilidad (A)**: Refleja cooperaci√≥n, empat√≠a y confianza versus competitividad, 
           escepticismo y objetividad.
        
        5. **Estabilidad Emocional (N)**: Mide la capacidad de mantener la calma y gestionar el estr√©s 
           versus sensibilidad emocional y reactividad.
        
        **Aplicaciones:**
        - Orientaci√≥n vocacional y desarrollo profesional
        - Selecci√≥n de personal y evaluaci√≥n de ajuste cultural
        - Desarrollo personal y autoconocimiento
        - Coaching y mentoring
        - Investigaci√≥n en psicolog√≠a organizacional
        
        **Nota Importante:** Este test es una herramienta de autoexploraci√≥n y orientaci√≥n. Para 
        evaluaciones formales en contextos de selecci√≥n o cl√≠nicos, se recomienda utilizar 
        instrumentos estandarizados administrados por profesionales cualificados.
        """)
    
    st.markdown("---")
    
    # --- 8. EXPORTAR Y ACCIONES ---
    st.header("7. üì• Exportar Resultados")
    
    col_download, col_reiniciar = st.columns(2)
    
    with col_download:
        # Preparar CSV
        csv_data = df_resultados.to_csv(index=False)
        
        st.download_button(
            label="üìä Descargar Resultados (CSV)",
            data=csv_data,
            file_name=f"BigFive_Resultados_{st.session_state.fecha_evaluacion.replace('/', '-').replace(' ', '_').replace(':', '-')}.csv",
            mime="text/csv",
            use_container_width=True
        )
    
    with col_reiniciar:
        if st.button("üîÑ Realizar Nueva Evaluaci√≥n", type="primary", use_container_width=True):
            reiniciar_test()
            st.rerun()
    
    st.markdown("---")
    
    # Disclaimer
    st.info("""
    **Disclaimer:** Los resultados de este test son orientativos y est√°n basados en tus respuestas 
    autorreportadas. La personalidad es compleja y multidimensional. Este test proporciona una 
    aproximaci√≥n general a tu perfil, pero no reemplaza una evaluaci√≥n profesional completa.
    """)

# --- 7. FLUJO PRINCIPAL ---

if st.session_state.stage == 'inicio':
    components.html('<a id="top-anchor"></a>', height=0)

    vista_inicio()
elif st.session_state.stage == 'test_activo':
    vista_test_activo()
elif st.session_state.stage == 'resultados':
    vista_resultados()

# --- 8. FOOTER ---
st.markdown("---")
st.markdown("""
<p style='text-align: center; font-size: 0.9em; color: #666; padding: 20px 0;'>
    üß† <strong>Test Big Five (OCEAN)</strong> - Evaluaci√≥n de Personalidad Profesional<br>
    Basado en el modelo cient√≠fico de los Cinco Grandes Factores de Personalidad<br>
    ¬© 2025 - Herramienta educativa y de orientaci√≥n | No reemplaza evaluaci√≥n profesional
</p>
""", unsafe_allow_html=True)


